/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var java = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,10],$V2=[1,11],$V3=[10,14],$V4=[5,14],$V5=[1,35],$V6=[1,34],$V7=[1,36],$V8=[1,37],$V9=[1,38],$Va=[1,39],$Vb=[1,40],$Vc=[11,18,35,38,39,40,41,42],$Vd=[1,52],$Ve=[1,53],$Vf=[1,51],$Vg=[12,33],$Vh=[2,30],$Vi=[1,56],$Vj=[1,57],$Vk=[1,74],$Vl=[1,66],$Vm=[1,63],$Vn=[1,64],$Vo=[1,81],$Vp=[1,75],$Vq=[1,76],$Vr=[1,77],$Vs=[1,78],$Vt=[1,79],$Vu=[1,80],$Vv=[12,45],$Vw=[1,83],$Vx=[1,85],$Vy=[1,94],$Vz=[1,95],$VA=[1,96],$VB=[1,97],$VC=[1,98],$VD=[1,99],$VE=[1,100],$VF=[1,101],$VG=[1,102],$VH=[1,103],$VI=[1,104],$VJ=[1,105],$VK=[1,106],$VL=[1,107],$VM=[12,33,45,77,82,83,84,85,86,87,88,89,90,91,92,93,94,95],$VN=[1,112],$VO=[1,128],$VP=[1,129],$VQ=[1,130],$VR=[1,131],$VS=[1,132],$VT=[1,133],$VU=[1,135],$VV=[1,134],$VW=[33,45],$VX=[12,33,45,77,88,89],$VY=[1,163],$VZ=[2,11,18,38,39,40,41,42,64,69,70,71,72,79,80],$V_=[1,171],$V$=[1,175],$V01=[12,33,45,77,82,83,84,85,88,89],$V11=[12,33,45,77,82,83,84,85,86,87,88,89],$V21=[12,33,45,77,82,83,84,85,86,87,88,89,90,91],$V31=[12,33,45,77,82,83,84,85,86,87,88,89,90,91,92,93],$V41=[1,204],$V51=[1,205],$V61=[2,11,18,38,39,40,41,42,62,63,64,69,70,71,72,76,78,79,80],$V71=[1,211],$V81=[2,11,18,38,39,40,41,42,62,63,64,67,69,70,71,72,76,78,79,80],$V91=[1,221],$Va1=[1,244],$Vb1=[1,245],$Vc1=[1,250],$Vd1=[18,76,78];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"file":4,"EOF":5,"error_declaration":6,"imports":7,"clases":8,"import":9,"RESERVADA_IMPORT":10,"IDENTIFICADOR":11,"SIMBOLO_PUNTOCOMA":12,"class":13,"RESERVADA_CLASS":14,"class_body":15,"SIMBOLO_LLAVE_IZQ":16,"class_declarations":17,"SIMBOLO_LLAVE_DER":18,"class_declaration":19,"asignation_declaration":20,"var_declaration":21,"function":22,"main_method":23,"asignation":24,"increment":25,"decrement":26,"SIMBOLO_INCREMENTO":27,"SIMBOLO_DECREMENTO":28,"SIMBOLO_IGUAL":29,"expression":30,"tipo_dato":31,"var_declarations":32,"SIMBOLO_COMA":33,"var_declarationss":34,"RESERVADA_VOID":35,"parameters":36,"function_body":37,"RESERVADA_INT":38,"RESERVADA_DOUBLE":39,"RESERVADA_STRING":40,"RESERVADA_BOOLEAN":41,"RESERVADA_CHAR":42,"empty_parameters":43,"SIMBOLO_PARENTESIS_IZQ":44,"SIMBOLO_PARENTESIS_DER":45,"params":46,"param":47,"RESERVADA_MAIN":48,"function_declarations":49,"function_declaration":50,"function_call_declaration":51,"if_declaration":52,"for_declaration":53,"while_declaration":54,"do_declaration":55,"switch_declaration":56,"print_declaration":57,"return_declaration":58,"declaration_body":59,"declarations":60,"declaration":61,"RESERVADA_CONTINUE":62,"RESERVADA_BREAK":63,"RESERVADA_IF":64,"condition_declaration":65,"elif_declaration":66,"RESERVADA_ELSE":67,"else_declaration":68,"RESERVADA_FOR":69,"RESERVADA_WHILE":70,"RESERVADA_DO":71,"RESERVADA_SWITCH":72,"switch_body":73,"cases_declarations":74,"cases_declaration":75,"RESERVADA_CASE":76,"SIMBOLO_DOSPUNTOS":77,"RESERVADA_DEFAULT":78,"RESERVADA_RETURN":79,"RESERVADA_PRINT":80,"aritmetic":81,"SIMBOLO_MAYOR":82,"SIMBOLO_MENOR":83,"SIMBOLO_MENORIGUAL":84,"SIMBOLO_MAYORIGUAL":85,"SIMBOLO_ESIGUAL":86,"SIMBOLO_NOESIGUAL":87,"SIMBOLO_AND":88,"SIMBOLO_OR":89,"SIMBOLO_MAS":90,"SIMBOLO_MENOS":91,"SIMBOLO_POR":92,"SIMBOLO_ENTRE":93,"SIMBOLO_ELEVADO":94,"SIMBOLO_MODULO":95,"SIMBOLO_NOT":96,"literal":97,"parameters_data":98,"params_data":99,"param_data":100,"integer_literal":101,"double_literal":102,"boolean_literal":103,"string_literal":104,"null_literal":105,"char_literal":106,"CARACTER":107,"ENTERO":108,"DECIMAL":109,"RESERVADA_TRUE":110,"RESERVADA_FALSE":111,"CADENA":112,"RESERVADA_NULL":113,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"RESERVADA_IMPORT",11:"IDENTIFICADOR",12:"SIMBOLO_PUNTOCOMA",14:"RESERVADA_CLASS",16:"SIMBOLO_LLAVE_IZQ",18:"SIMBOLO_LLAVE_DER",27:"SIMBOLO_INCREMENTO",28:"SIMBOLO_DECREMENTO",29:"SIMBOLO_IGUAL",33:"SIMBOLO_COMA",35:"RESERVADA_VOID",38:"RESERVADA_INT",39:"RESERVADA_DOUBLE",40:"RESERVADA_STRING",41:"RESERVADA_BOOLEAN",42:"RESERVADA_CHAR",44:"SIMBOLO_PARENTESIS_IZQ",45:"SIMBOLO_PARENTESIS_DER",48:"RESERVADA_MAIN",62:"RESERVADA_CONTINUE",63:"RESERVADA_BREAK",64:"RESERVADA_IF",67:"RESERVADA_ELSE",69:"RESERVADA_FOR",70:"RESERVADA_WHILE",71:"RESERVADA_DO",72:"RESERVADA_SWITCH",76:"RESERVADA_CASE",77:"SIMBOLO_DOSPUNTOS",78:"RESERVADA_DEFAULT",79:"RESERVADA_RETURN",80:"RESERVADA_PRINT",82:"SIMBOLO_MAYOR",83:"SIMBOLO_MENOR",84:"SIMBOLO_MENORIGUAL",85:"SIMBOLO_MAYORIGUAL",86:"SIMBOLO_ESIGUAL",87:"SIMBOLO_NOESIGUAL",88:"SIMBOLO_AND",89:"SIMBOLO_OR",90:"SIMBOLO_MAS",91:"SIMBOLO_MENOS",92:"SIMBOLO_POR",93:"SIMBOLO_ENTRE",94:"SIMBOLO_ELEVADO",95:"SIMBOLO_MODULO",96:"SIMBOLO_NOT",107:"CARACTER",108:"ENTERO",109:"DECIMAL",110:"RESERVADA_TRUE",111:"RESERVADA_FALSE",112:"CADENA",113:"RESERVADA_NULL"},
productions_: [0,[3,2],[3,2],[3,1],[4,2],[4,1],[7,2],[7,1],[9,3],[8,2],[8,1],[13,3],[15,3],[15,2],[15,3],[17,2],[17,1],[19,2],[19,2],[19,1],[19,1],[20,1],[20,1],[20,1],[25,2],[26,2],[24,3],[21,2],[32,3],[32,1],[34,1],[34,3],[22,4],[22,4],[31,1],[31,1],[31,1],[31,1],[31,1],[43,2],[36,3],[36,2],[46,3],[46,1],[47,2],[23,4],[37,3],[37,3],[37,2],[49,2],[49,1],[50,2],[50,2],[50,2],[50,1],[50,1],[50,1],[50,2],[50,1],[50,2],[50,2],[50,2],[59,3],[59,2],[59,3],[60,2],[60,1],[61,2],[61,2],[61,2],[61,1],[61,1],[61,1],[61,2],[61,1],[61,2],[61,2],[61,2],[61,2],[61,2],[52,4],[52,3],[66,5],[66,4],[66,1],[68,2],[53,9],[53,9],[53,9],[53,9],[54,3],[55,4],[56,5],[73,3],[73,2],[74,2],[74,1],[75,4],[75,3],[58,2],[58,1],[57,4],[57,3],[65,3],[30,1],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,2],[81,2],[81,1],[81,3],[51,2],[98,3],[98,2],[98,3],[99,3],[99,1],[100,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[106,1],[101,1],[102,1],[103,1],[103,1],[104,1],[105,1],[6,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return {"num_errores":contador, "AST": $$[$0-1], "errores":errores};
      
break;
case 2:

        return {"error":"error_culerisimo"}
      
break;
case 3:

        return "";
      
break;
case 4:

        this.$ = {"imports":$$[$0-1], "clases":$$[$0] };
      
break;
case 5:

        this.$ = {"clases":$$[$0]};
      
break;
case 6: case 9: case 15: case 49: case 65: case 95:

        $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
      
break;
case 7: case 10: case 16: case 29: case 43: case 50: case 66: case 84: case 96: case 128:

        this.$ = [$$[$0]];
      
break;
case 8:

        this.$ = {"tipo":"instruccion_import", "identificador":$$[$0-1]};
      
break;
case 11:

        this.$ = {"tipo":"declaracion_clase", "identificador":$$[$0-1], "instrucciones":$$[$0]};
      
break;
case 12: case 14: case 17: case 18: case 40: case 46: case 51: case 52: case 53: case 57: case 59: case 60: case 62: case 64: case 67: case 68: case 69: case 73: case 75: case 76: case 79: case 103: case 122: case 124:

        this.$ = $$[$0-1];
      
break;
case 13: case 48: case 63:

        this.$ = "sin_instrucciones";
      
break;
case 19: case 20: case 21: case 22: case 23: case 54: case 55: case 56: case 58: case 70: case 71: case 72: case 74: case 121: case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 136:

        this.$ = $$[$0];
      
break;
case 24:

        this.$ = {"tipo": "instruccion_incremento", "identificador": $$[$0-1]};
      
break;
case 25:

        this.$ = {"tipo": "instruccion_decremento", "identificador": $$[$0-1]};
      
break;
case 26:

        this.$ = {"tipo": "instruccion_asignacion", "identificador": $$[$0-2], "valor": $$[$0]};
      
break;
case 27:

        this.$ = {"tipo": "declaracion_variable", "tipo_dato": $$[$0-1], "declaraciones": $$[$0] };
      
break;
case 28: case 127:

        $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
      
break;
case 30:

        this.$ = {"identificador":$$[$0]};
      
break;
case 31:

        this.$ = {"identificador": $$[$0-2], "valor": $$[$0]};
      
break;
case 32:

        this.$ = {"tipo":"declaracion_metodo", "parametros": $$[$0-1], "instrucciones": $$[$0]};
      
break;
case 33:

        this.$ = {"tipo":"declaracion_funcion", "tipo_dato": $$[$0-3], "parametros": $$[$0-1], "instrucciones": $$[$0]};
      
break;
case 34:

        this.$ = "tipo_int";
      
break;
case 35:

        this.$ = "tipo_double";
      
break;
case 36:

        this.$ = "tipo_string";
      
break;
case 37:

        this.$ = "tipo_boolean";
      
break;
case 38:

        this.$ = "tipo_char";
      
break;
case 39:

        this.$ = null;
      
break;
case 41: case 125:

        this.$ = "sin_parametros";
      
break;
case 42:

        $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2];
      
break;
case 44:

        this.$ = {"tipo_dato": $$[$0-1], "identificador": $$[$0]};
      
break;
case 45:

        this.$ = {"tipo": "declaracion_metodo_main", "instrucciones": $$[$0]};
      
break;
case 47: case 61:

        this.$ = {"error":"error"};
      
break;
case 77:

        this.$ = {"tipo": "instruccion_continue"};
      
break;
case 78:

        this.$ = {"tipo": "instruccion_break"};
      
break;
case 80:

        this.$ = {"tipo": "instruccion_if_compuesta", "condicion": $$[$0-2], "instrucciones": $$[$0-1], "instrucciones_else":$$[$0]};
      
break;
case 81:

        this.$ = {"tipo": "instruccion_if", "condicion": $$[$0-1], "instrucciones": $$[$0]}
      
break;
case 82:

        let elif = [{"tipo":"instruccion_else_if", "condicion":$$[$0-2], "instrucciones":$$[$0-1]}]; elif.push($$[$0]); this.$=elif;
      
break;
case 83:

        this.$ = [{"tipo":"instruccion_else_if", "condicion":$$[$0-1], "instrucciones":$$[$0]}]
      
break;
case 85:

        this.$ = {"tipo":"instruccion_else", "instrucciones":$$[$0]}
      
break;
case 86: case 87: case 88: case 89:

        this.$ = {"tipo":"instruccion_for", "variable":$$[$0-6],"condicion":$$[$0-4], "cambio":$$[$0-2]};
      
break;
case 90:

        this.$ = {"tipo":"instruccion_while", "condicion":$$[$0-1], "instrucciones":$$[$0]};
      
break;
case 91:

        this.$ = {"tipo":"instruccion_do_while", "condicion":$$[$0], "instrucciones":$$[$0-2]};
      
break;
case 92:

        this.$ = {"tipo":"instruccion_switch", "exprecion_condicion":$$[$0-2], "casos":$$[$0]};
      
break;
case 93:

        this.$ = $$[$0-1]
      
break;
case 94:

        this.$ = "sin_casos";
      
break;
case 97:

        this.$ = {"tipo":"switch_case", "expresion_caracteristica":$$[$0-2], "instrucciones":$$[$0]};
      
break;
case 98:

        this.$ = {"tipo":"switch_default", "instrucciones":$$[$0]};
      
break;
case 99:

        this.$ = {"tipo":"instruccion_return", "valor_retornado":$$[$0]};
      
break;
case 100:

        this.$ = {"tipo":"instruccion_return"};
      
break;
case 101:

        this.$ = {"tipo":"instruccion_print", "expresion_impresa": $$[$0-1]};
      
break;
case 102:

        this.$ = {"tipo":"instruccion_print", "expresion_impresa":""};
      
break;
case 104:

        this.$ = {"expresion":$$[$0]};
      
break;
case 105:

        this.$ = {"operacion":"comparacion_mayor_que_(>)","operando_izquierda":$$[$0-2], "operando_derecha":$$[$0]};
      
break;
case 106:

        this.$ = {"operacion":"comparacion_menor_que_(<)","operando_izquierda":$$[$0-2], "operando_derecha":$$[$0]};
      
break;
case 107:

        this.$ = {"operacion":"comparacion_menor_igual_que_(<=)","operando_izquierda":$$[$0-2], "operando_derecha":$$[$0]};
      
break;
case 108:

        this.$ = {"operacion":"comparacion_mayor_igual_que_(>=)","operando_izquierda":$$[$0-2], "operando_derecha":$$[$0]};
      
break;
case 109:

        this.$ = {"operacion":"comparacion_igual_(==)","operando_izquierda":$$[$0-2], "operando_derecha":$$[$0]};
      
break;
case 110:

        this.$ = {"operacion":"comparacion_no_igual_(!=)","operando_izquierda":$$[$0-2], "operando_derecha":$$[$0]};
      
break;
case 111:

        this.$ = {"operacion":"comparacion_AND_(&&)","operando_izquierda":$$[$0-2], "operando_derecha":$$[$0]};
      
break;
case 112:

        this.$ = {"operacion":"comparacion_OR_(||)","operando_izquierda":$$[$0-2], "operando_derecha":$$[$0]};
      
break;
case 113:

        this.$ = {"operacion":"comparacion_suma_(+)","operando_izquierda":$$[$0-2], "operando_derecha":$$[$0]};
      
break;
case 114:

        this.$ = {"operacion":"comparacion_resta_(-)","operando_izquierda":$$[$0-2], "operando_derecha":$$[$0]};
      
break;
case 115:

        this.$ = {"operacion":"comparacion_multiplicacion_(*)","operando_izquierda":$$[$0-2], "operando_derecha":$$[$0]};
      
break;
case 116:

        this.$ = {"operacion":"comparacion_divicion_(/)","operando_izquierda":$$[$0-2], "operando_derecha":$$[$0]};
      
break;
case 117:

        this.$ = {"operacion":"comparacion_potencia_(^)","operando_izquierda":$$[$0-2], "operando_derecha":$$[$0]};
      
break;
case 118:

        this.$ = {"operacion":"comparacion_residuo_(%)","operando_izquierda":$$[$0-2], "operando_derecha":$$[$0]};
      
break;
case 119:

        this.$ = {"operacion":"comparacion_NOT_(!)", "operando":$$[$0]};
      
break;
case 120:

        this.$ = {"operacion":"comparacion_negacion_(-)","operando":$$[$0]};
      
break;
case 123:

        this.$ = {"tipo":"instruccion_funcion","identificador":$$[$0-1], "parametros":$$[$0]};
      
break;
case 126:


      
break;
case 137:

        this.$ = {"tipo_valor":"identificador", "valor": $$[$0]};
      
break;
case 138:

        this.$ = {"tipo_valor":"caracter", "valor": $$[$0]};
      
break;
case 139:

        this.$ = {"tipo_valor":"entero", "valor": Number($$[$0])};
      
break;
case 140:

        this.$ = {"tipo_valor":"decimal", "valor": Number($$[$0])};
      
break;
case 141:

        this.$ = {"tipo_valor":"booleano", "valor": true};
      
break;
case 142:

        this.$ = {"tipo_valor":"booleano", "valor": false};
      
break;
case 143:

        this.$ = {"tipo_valor":"cadena", "valor": $$[$0]};
      
break;
case 144:

        this.$ = {"tipo_valor":"indefinido", "valor": null};
      
break;
case 145:

        contador++;
        errores.push([{"valor":yytext,"fila":this._$.first_line, "columna":this._$.first_column}]);
        this.$ = {"error":$$[$0]};
      
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,4],6:3,7:5,8:6,9:8,10:$V1,13:9,14:$V2},{1:[3]},{5:[1,12]},{5:[1,13]},{1:[2,3]},{8:14,9:15,10:$V1,13:9,14:$V2},{5:[2,5],13:16,14:$V2},o([5,12,18,45],[2,145]),o($V3,[2,7]),o($V4,[2,10]),{11:[1,17]},{11:[1,18]},{1:[2,1]},{1:[2,2]},{5:[2,4],13:16,14:$V2},o($V3,[2,6]),o($V4,[2,9]),{12:[1,19]},{15:20,16:[1,21]},o($V3,[2,8]),o($V4,[2,11]),{2:$V0,6:24,11:$V5,17:22,18:[1,23],19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,31:33,35:$V6,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb},{11:$V5,18:[1,41],19:42,20:26,21:27,22:28,23:29,24:30,25:31,26:32,31:33,35:$V6,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb},o($V4,[2,13]),{18:[1,43]},o($Vc,[2,16]),{12:[1,44]},{12:[1,45]},o($Vc,[2,19]),o($Vc,[2,20]),{12:[2,21]},{12:[2,22]},{12:[2,23]},{11:[1,47],32:46,34:48},{11:[1,49],48:[1,50]},{27:$Vd,28:$Ve,29:$Vf},{11:[2,34]},{11:[2,35]},{11:[2,36]},{11:[2,37]},{11:[2,38]},o($V4,[2,12]),o($Vc,[2,15]),o($V4,[2,14]),o($Vc,[2,17]),o($Vc,[2,18]),{12:[2,27],33:[1,54]},o($Vg,$Vh,{36:55,29:$Vi,44:$Vj}),o($Vg,[2,29]),{36:58,44:$Vj},{43:59,44:[1,60]},{11:$Vk,30:61,44:$Vl,51:73,81:62,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},o($Vv,[2,24]),o($Vv,[2,25]),{11:$Vw,34:82},{16:$Vx,37:84},{11:$Vk,30:86,44:$Vl,51:73,81:62,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{31:90,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,45:[1,88],46:87,47:89},{16:$Vx,37:91},{16:$Vx,37:92},{45:[1,93]},{12:[2,26]},o([12,33,45,77],[2,104],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),{11:$Vk,44:$Vl,51:73,81:108,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{11:$Vk,44:$Vl,51:73,81:109,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},o($VM,[2,121]),{11:$Vk,44:$Vl,51:73,81:110,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},o($VM,[2,130]),o($VM,[2,131]),o($VM,[2,132]),o($VM,[2,133]),o($VM,[2,134]),o($VM,[2,135]),o($VM,[2,136]),o($VM,[2,137],{98:111,44:$VN}),o($VM,[2,139]),o($VM,[2,140]),o($VM,[2,141]),o($VM,[2,142]),o($VM,[2,143]),o($VM,[2,144]),o($VM,[2,138]),o($Vg,[2,28]),o($Vg,$Vh,{29:$Vi}),o($Vc,[2,33]),{2:$V0,6:114,11:$VO,18:[1,115],20:119,21:117,24:30,25:31,26:32,31:127,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,49:113,50:116,51:118,52:120,53:121,54:122,55:123,56:124,57:125,58:126,64:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,79:$VU,80:$VV},o($Vg,[2,31]),{33:[1,137],45:[1,136]},{16:[2,41]},o($VW,[2,43]),{11:[1,138]},o($Vc,[2,32]),o($Vc,[2,45]),{16:[2,39]},{11:$Vk,44:$Vl,51:73,81:139,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{11:$Vk,44:$Vl,51:73,81:140,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{11:$Vk,44:$Vl,51:73,81:141,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{11:$Vk,44:$Vl,51:73,81:142,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{11:$Vk,44:$Vl,51:73,81:143,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{11:$Vk,44:$Vl,51:73,81:144,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{11:$Vk,44:$Vl,51:73,81:145,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{11:$Vk,44:$Vl,51:73,81:146,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{11:$Vk,44:$Vl,51:73,81:147,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{11:$Vk,44:$Vl,51:73,81:148,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{11:$Vk,44:$Vl,51:73,81:149,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{11:$Vk,44:$Vl,51:73,81:150,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{11:$Vk,44:$Vl,51:73,81:151,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{11:$Vk,44:$Vl,51:73,81:152,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},o($VM,[2,119]),o($VX,[2,120],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),{45:[1,153],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},o($VM,[2,123]),{2:$V0,6:156,11:$Vk,30:158,44:$Vl,45:[1,155],51:73,81:62,91:$Vm,96:$Vn,97:65,99:154,100:157,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{2:$V0,6:161,11:$VO,18:[1,159],20:119,21:117,24:30,25:31,26:32,31:127,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,50:160,51:118,52:120,53:121,54:122,55:123,56:124,57:125,58:126,64:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,79:$VU,80:$VV},{12:$VY,18:[1,162]},o($Vc,[2,48]),o($VZ,[2,50]),{12:[1,164]},{12:[1,165]},{12:[1,166]},o($VZ,[2,54]),o($VZ,[2,55]),o($VZ,[2,56]),{12:[1,167]},o($VZ,[2,58]),{12:[1,168]},{12:[1,169]},{11:$Vw,32:46,34:48},{27:$Vd,28:$Ve,29:$Vf,44:$VN,98:111},{44:$V_,65:170},{44:[1,172]},{44:$V_,65:173},{16:$V$,59:174},{44:[1,176]},{44:[1,177]},{11:$Vk,12:[2,100],30:178,44:$Vl,51:73,81:62,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{16:[2,40]},{31:90,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,47:179},o($VW,[2,44]),o($V01,[2,105],{86:$VC,87:$VD,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($V01,[2,106],{86:$VC,87:$VD,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($V01,[2,107],{86:$VC,87:$VD,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($V01,[2,108],{86:$VC,87:$VD,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($V11,[2,109],{90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($V11,[2,110],{90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($VX,[2,111],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($VX,[2,112],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($V21,[2,113],{92:$VI,93:$VJ,94:$VK,95:$VL}),o($V21,[2,114],{92:$VI,93:$VJ,94:$VK,95:$VL}),o($V31,[2,115],{94:$VK,95:$VL}),o($V31,[2,116],{94:$VK,95:$VL}),o($VM,[2,117]),o($VM,[2,118]),o($VM,[2,122]),{33:[1,181],45:[1,180]},o($VM,[2,125]),{45:[1,182]},o($VW,[2,128]),o($VW,[2,129]),o($Vc,[2,46]),o($VZ,[2,49]),{12:$VY},o($Vc,[2,47]),o($VZ,[2,61]),o($VZ,[2,51]),o($VZ,[2,52]),o($VZ,[2,53]),o($VZ,[2,57]),o($VZ,[2,59]),o($VZ,[2,60]),{16:$V$,59:183},{11:$Vk,30:184,44:$Vl,51:73,81:62,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{11:[1,187],21:185,24:186,31:127,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb},{16:$V$,59:188},{70:[1,189]},{2:$V0,6:192,11:$VO,18:[1,191],20:196,21:194,24:30,25:31,26:32,31:127,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,51:195,52:197,53:198,54:199,55:200,56:201,57:202,58:203,60:190,61:193,62:$V41,63:$V51,64:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,79:$VU,80:$VV},{11:$Vk,30:206,44:$Vl,51:73,81:62,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{11:$Vk,30:207,44:$Vl,45:[1,208],51:73,81:62,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{12:[2,99]},o($VW,[2,42]),o($VM,[2,124]),{11:$Vk,30:158,44:$Vl,51:73,81:62,91:$Vm,96:$Vn,97:65,100:209,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},o($VM,[2,126]),o($V61,[2,81],{66:210,68:212,67:$V71}),{45:[1,213]},{12:[1,214]},{12:[1,215]},{29:$Vf},o($V61,[2,90]),{44:$V_,65:216},{2:$V0,6:219,11:$VO,18:[1,217],20:196,21:194,24:30,25:31,26:32,31:127,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,51:195,52:197,53:198,54:199,55:200,56:201,57:202,58:203,61:218,62:$V41,63:$V51,64:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,79:$VU,80:$VV},o($V81,[2,63]),{12:$V91,18:[1,220]},o($V61,[2,66]),{12:[1,222]},{12:[1,223]},{12:[1,224]},o($V61,[2,70]),o($V61,[2,71]),o($V61,[2,72]),{12:[1,225]},o($V61,[2,74]),{12:[1,226]},{12:[1,227]},{12:[1,228]},{12:[1,229]},{45:[1,230]},{45:[1,231]},{12:[2,102]},o($VW,[2,127]),o($V61,[2,80]),{16:$V$,59:233,64:[1,232]},o($V61,[2,84]),o([12,16],[2,103]),{11:$Vk,30:234,44:$Vl,51:73,81:62,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{11:$Vk,30:235,44:$Vl,51:73,81:62,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{12:[2,91]},o($V81,[2,62]),o($V61,[2,65]),{12:$V91},o($V81,[2,64]),o($V61,[2,79]),o($V61,[2,67]),o($V61,[2,68]),o($V61,[2,69]),o($V61,[2,73]),o($V61,[2,75]),o($V61,[2,76]),o($V61,[2,77]),o($V61,[2,78]),{16:[1,237],18:[1,238],73:236},{12:[2,101]},{44:$V_,65:239},o($V61,[2,85]),{12:[1,240]},{12:[1,241]},o($V61,[2,92]),{74:242,75:243,76:$Va1,78:$Vb1},{18:[1,246]},{16:$V$,59:247},{11:$Vc1,25:248,26:249},{11:$Vc1,25:251,26:252},{18:[1,253],75:254,76:$Va1,78:$Vb1},o($Vd1,[2,96]),{11:$Vk,30:255,44:$Vl,51:73,81:62,91:$Vm,96:$Vn,97:65,101:67,102:68,103:69,104:70,105:71,106:72,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu},{77:[1,256]},o($V61,[2,94]),o($V61,[2,83],{68:212,66:257,67:$V71}),{45:[1,258]},{45:[1,259]},{27:$Vd,28:$Ve},{45:[1,260]},{45:[1,261]},o($V61,[2,93]),o($Vd1,[2,95]),{77:[1,262]},{2:$V0,6:219,11:$VO,20:196,21:194,24:30,25:31,26:32,31:127,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,51:195,52:197,53:198,54:199,55:200,56:201,57:202,58:203,60:263,61:193,62:$V41,63:$V51,64:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,79:$VU,80:$VV},o($V61,[2,82]),{16:$V$,59:264},{16:$V$,59:265},{16:$V$,59:266},{16:$V$,59:267},{2:$V0,6:219,11:$VO,20:196,21:194,24:30,25:31,26:32,31:127,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,51:195,52:197,53:198,54:199,55:200,56:201,57:202,58:203,60:268,61:193,62:$V41,63:$V51,64:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,79:$VU,80:$VV},o($Vd1,[2,98],{24:30,25:31,26:32,31:127,21:194,51:195,20:196,52:197,53:198,54:199,55:200,56:201,57:202,58:203,61:218,6:219,2:$V0,11:$VO,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,62:$V41,63:$V51,64:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,79:$VU,80:$VV}),o($V61,[2,86]),o($V61,[2,88]),o($V61,[2,87]),o($V61,[2,89]),o($Vd1,[2,97],{24:30,25:31,26:32,31:127,21:194,51:195,20:196,52:197,53:198,54:199,55:200,56:201,57:202,58:203,61:218,6:219,2:$V0,11:$VO,38:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,62:$V41,63:$V51,64:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,79:$VU,80:$VV})],
defaultActions: {4:[2,3],12:[2,1],13:[2,2],30:[2,21],31:[2,22],32:[2,23],36:[2,34],37:[2,35],38:[2,36],39:[2,37],40:[2,38],61:[2,26],88:[2,41],93:[2,39],136:[2,40],178:[2,99],208:[2,102],216:[2,91],231:[2,101]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

      let contador = 0;
      let errores = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:;
break;
case 1:;
break;
case 2:;
break;
case 3:return 16;
break;
case 4:return 18;
break;
case 5:return 44;
break;
case 6:return 45;
break;
case 7:return 92;
break;
case 8:return 93;
break;
case 9:return 27;
break;
case 10:return 28;
break;
case 11:return 94;
break;
case 12:return 95;
break;
case 13:return 86;
break;
case 14:return 87;
break;
case 15:return 85;
break;
case 16:return 84;
break;
case 17:return 82;
break;
case 18:return 83;
break;
case 19:return 29;
break;
case 20:return 90;
break;
case 21:return 91;
break;
case 22:return 88;
break;
case 23:return 89;
break;
case 24:return 96;
break;
case 25:return 12;
break;
case 26:return 77;
break;
case 27:return 33;
break;
case 28:return 10;
break;
case 29:return 14;
break;
case 30:return 38;
break;
case 31:return 39;
break;
case 32:return 41;
break;
case 33:return 42;
break;
case 34:return 40;
break;
case 35:return 35;
break;
case 36:return 48;
break;
case 37:return 110;
break;
case 38:return 111;
break;
case 39:return 64;
break;
case 40:return 67;
break;
case 41:return 72;
break;
case 42:return 76;
break;
case 43:return 78;
break;
case 44:return 70;
break;
case 45:return 71;
break;
case 46:return 69;
break;
case 47:return 63;
break;
case 48:return 62;
break;
case 49:return 79;
break;
case 50:return 113;
break;
case 51:return 80;
break;
case 52:return 80;
break;
case 53:return 11;
break;
case 54:return 107;
break;
case 55:return 112;
break;
case 56:return 109;
break;
case 57:return 108;
break;
case 58:return 5;
break;
case 59:return 'INVALIDO';
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*(.|\n)*\*\/)/,/^(?:\s+)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\*)/,/^(?:\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\^)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:import\b)/,/^(?:class\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:null\b)/,/^(?:System\.out\.println\b)/,/^(?:System\.out\.print\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:'([^']|{CE})')/,/^(?:"(\\.|[^"])*")/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = java;
exports.Parser = java.Parser;
exports.parse = function () { return java.parse.apply(java, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}